<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么是 MIME Type(MIME类型)？文件扩展名?</title>
      <link href="/tools/%E4%BB%80%E4%B9%88%E6%98%AF%20MIME%20Type(MIME%E7%B1%BB%E5%9E%8B)%EF%BC%9F%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%EF%BC%9F/"/>
      <url>/tools/%E4%BB%80%E4%B9%88%E6%98%AF%20MIME%20Type(MIME%E7%B1%BB%E5%9E%8B)%EF%BC%9F%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>一、</p><p>首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。<br>媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如:</p><p>Content-Type: text/HTML</p><p>表示内容是 text/HTML 类型，也就是超文本文件。为什么是“text/HTML”而不是“HTML/text”或者别的什么？MIME Type 不是个人指定的，是经过 ietf 组织协商，以 RFC 的形式作为建议的标准发布在网上的，大多数的 Web 服务器和用户代理都会支持这个规范 (顺便说一句，Email 附件的类型也是通过 MIME Type 指定的)。</p><p>通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。</p><p>XHTML 正是一个获得广泛应用的格式，因此，在 RFC 3236 中，说明了 XHTML 格式文件的 MIME Type 应该是 application/xHTML+XML。</p><p>当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理，这可能和你在操作系统中给文件配置的 MIME Type 有关。比如在 Windows 下，打开注册表的“HKEY_LOCAL_MACHINESOFTWAREClassesMIMEDatabaseContent Type”主键，你可以看到所有 MIME Type 的配置信息。</p><p>二、</p><p>在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。</p><p>例如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。在大多数实际情况中，这个文件然后将传送给Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类型的方法是通过Response对象的ContentType属性。</p><p>多媒体文件格式MIME</p><p>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。</p><p>MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。</p><p>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p><p>常见的MIME类型</p><p>超文本标记语言文本 .html,.html text/html<br>普通文本 .txt text/plain<br>RTF文本 .rtf application/rtf<br>GIF图形 .gif image/gif<br>JPEG图形 .ipeg,.jpg image/jpeg<br>au声音文件 .au audio/basic<br>MIDI音乐文件 mid,.midi audio/midi,audio/x-midi<br>RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio<br>MPEG文件 .mpg,.mpeg video/mpeg<br>AVI文件 .avi video/x-msvideo<br>GZIP文件 .gz application/x-gzip<br>TAR文件 .tar application/x-tar</p><p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。而Web服务器和浏览器（包括操作系统）中，缺省都设置了标准的和常见的MIME类型，只有对于不常见的 MIME类型，才需要同时设置服务器和客户浏览器，以进行识别。</p><p>由于MIME类型与文档的后缀相关，因此服务器使用文档的后缀来区分不同文件的MIME类型，服务器中必须定义文档后缀和MIME类型之间的对应关系。而客户程序从服务器上接收数据的时候，它只是从服务器接受数据流，并不了解文档的名字，因此服务器必须使用附加信息来告诉客户程序数据的MIME类型。服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义，例如对于HTML文档，服务器将首先发送以下两行MIME标识信息,这个标识并不是真正的数据文件的一部分。</p><p>Content-type: text/html</p><p>注意，第二行为一个空行，这是必须的，使用这个空行的目的是将MIME信息与真正的数据内容分隔开。</p><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>官方的 MIME 信息是由 Internet Engineering Task Force (IETF) 在下面的文档中提供的：<br>RFC-822 Standard for ARPA Internet text messages</p><p>RFC-2045 MIME Part 1: Format of Internet Message Bodies</p><p>RFC-2046 MIME Part 2: Media Types</p><p>RFC-2047 MIME Part 3: Header Extensions for Non-ASCII Text</p><p>RFC-2048 MIME Part 4: Registration Procedures</p><p>RFC-2049 MIME Part 5: Conformance Criteria and Examples</p><p>不同的应用程序支持不同的 MIME 类型。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIME Type </tag>
            
            <tag> mime.types </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比Selenium好用？Python使用playwright获取S站在线游戏排名</title>
      <link href="/Python/%E6%AF%94Selenium%E5%A5%BD%E7%94%A8%EF%BC%9FPython%E4%BD%BF%E7%94%A8playwright%E8%8E%B7%E5%8F%96S%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%B8%B8%E6%88%8F%E6%8E%92%E5%90%8D/"/>
      <url>/Python/%E6%AF%94Selenium%E5%A5%BD%E7%94%A8%EF%BC%9FPython%E4%BD%BF%E7%94%A8playwright%E8%8E%B7%E5%8F%96S%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%B8%B8%E6%88%8F%E6%8E%92%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="比Selenium好用？Python使用playwright获取S站在线游戏排名"><a href="#比Selenium好用？Python使用playwright获取S站在线游戏排名" class="headerlink" title="比Selenium好用？Python使用playwright获取S站在线游戏排名"></a>比Selenium好用？Python使用playwright获取S站在线游戏排名</h1><p>在之前的文章中爬取了S的热销商品，也说明了因为Cloudflare的浏览器验证导致SDB无法爬取，连selenium也不行。当时我就放弃了。<br>但是前一段时间，有一个伙计给我讲：【用playwright啊！】<br>playwright支持多种语法，相比于selenium的Http协议，playwright的Websocket获取浏览器情况会更好一点。<br>Playwright的使用<br>安装：需要python3.7+</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> pip install --upgrade pip  </span><br><span class="line"><span class="number">2.</span> pip install playwright  </span><br><span class="line"><span class="number">3.</span> playwright install</span><br></pre></td></tr></tbody></table></figure><p>一次安装，Playwright就可以通过开发者工具与你安装的浏览器 (chromiun, firefox and webkit)进行交互，不像selenium下载对应浏览器版本的Driver了。</p><p>本次只讲一下最基本的页面获取，其他的功能各位自行查看文档吧：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright  </span><br><span class="line"><span class="number">2.</span>        </span><br><span class="line"><span class="number">3.</span> <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">4.</span>     browser = p.webkit.launch()  </span><br><span class="line"><span class="number">5.</span>     page = browser.new_page()  </span><br><span class="line"><span class="number">6.</span>     page.goto(<span class="string">"http://whatsmyuseragent.org/"</span>)  </span><br><span class="line"><span class="number">7.</span>     page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">8.</span>     html = page.content()  </span><br><span class="line"><span class="number">9.</span>     browser.close()</span><br></pre></td></tr></tbody></table></figure><p>html就是已经加载好的正文的内容，获取到的东西就可以交给选择器去处理跟筛选了。<br>实例:是一个第三方的S的数据库，在线人数，游戏价格等等都能查询的到。<br>在线人数，在线排名都有展示出来。现在开始获取数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">2.</span>     <span class="keyword">try</span>:  </span><br><span class="line"><span class="number">3.</span>         browser = p.chromium.launch(headless=<span class="literal">False</span>)  </span><br><span class="line"><span class="number">4.</span>         page = browser.new_page()  </span><br><span class="line"><span class="number">5.</span>         page.goto(<span class="string">'https://steamdb.info/graph/'</span>)  </span><br><span class="line"><span class="number">6.</span>         page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">7.</span>         html = page.content()  </span><br><span class="line"><span class="number">8.</span>         browser.close()  </span><br><span class="line"><span class="number">9.</span>         <span class="keyword">return</span> html  </span><br><span class="line"><span class="number">10.</span>     <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line"><span class="number">11.</span>         <span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure><p>不知道为什么开启无头就是通过不了。这样的话本页的html内容就获取下来了：<br>接下来用选择器进行内容解析：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> sel = Selector(text=content)  </span><br><span class="line"><span class="number">2.</span> nodes = sel.css(<span class="string">'#table-apps .app'</span>)  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span> node <span class="keyword">in</span> nodes:  </span><br><span class="line"><span class="number">4.</span>     title = node.css(<span class="string">'td:nth-child(3) a::text'</span>).extract_first()  </span><br><span class="line"><span class="number">5.</span>     current = node.css(<span class="string">'td:nth-child(4)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">6.</span>     peakToday = node.css(<span class="string">'td:nth-child(5)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">7.</span>     allPeak = node.css(<span class="string">'td:nth-child(6)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">8.</span>     <span class="built_in">print</span>(<span class="string">f"游戏：<span class="subst">{title}</span>,目前在线：<span class="subst">{current}</span>,今日最高在线：<span class="subst">{peakToday}</span>,历史最高在线：<span class="subst">{allPeak}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p>Playwright的代理配置<br>Playwright配置代理其实很简单，要在浏览器配置那一行加上proxy参数就可以了：<br>browser = p.chromium.launch(headless=False,proxy=proxy)</p><p>代码整合</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">from</span> parsel <span class="keyword">import</span> Selector  </span><br><span class="line"><span class="number">3.</span>    </span><br><span class="line"><span class="number">4.</span> <span class="keyword">def</span> <span class="title function_">getSteaminfo</span>():  </span><br><span class="line"><span class="number">5.</span>    </span><br><span class="line"><span class="number">6.</span>     proxy = {  </span><br><span class="line"><span class="number">7.</span>         <span class="string">'server'</span>: <span class="string">""</span>,  </span><br><span class="line"><span class="number">8.</span>         <span class="string">'username'</span>: <span class="string">""</span>,  </span><br><span class="line"><span class="number">9.</span>         <span class="string">'password'</span>: <span class="string">''</span>  </span><br><span class="line"><span class="number">10.</span>     }  </span><br><span class="line"><span class="number">11.</span>    </span><br><span class="line"><span class="number">12.</span>     <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">13.</span>         <span class="keyword">try</span>:  </span><br><span class="line"><span class="number">14.</span>             browser = p.chromium.launch(headless=<span class="literal">False</span>,proxy=proxy)  </span><br><span class="line"><span class="number">15.</span>             page = browser.new_page()  </span><br><span class="line"><span class="number">16.</span>             page.goto(<span class="string">'https://steamdb.info/graph/'</span>)  </span><br><span class="line"><span class="number">17.</span>             page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">18.</span>             html = page.content()  </span><br><span class="line"><span class="number">19.</span>             browser.close()  </span><br><span class="line"><span class="number">20.</span>             <span class="keyword">return</span> html  </span><br><span class="line"><span class="number">21.</span>         <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line"><span class="number">22.</span>             <span class="built_in">print</span>(e)  </span><br><span class="line"><span class="number">23.</span>    </span><br><span class="line"><span class="number">24.</span> <span class="keyword">def</span> <span class="title function_">start</span>():  </span><br><span class="line"><span class="number">25.</span>     content = getSteaminfo()  </span><br><span class="line"><span class="number">26.</span>     sel = Selector(text=content)  </span><br><span class="line"><span class="number">27.</span>     nodes = sel.css(<span class="string">'#table-apps .app'</span>)  </span><br><span class="line"><span class="number">28.</span>     <span class="keyword">for</span> node <span class="keyword">in</span> nodes:  </span><br><span class="line"><span class="number">29.</span>         title = node.css(<span class="string">'td:nth-child(3) a::text'</span>).extract_first()  </span><br><span class="line"><span class="number">30.</span>         current = node.css(<span class="string">'td:nth-child(4)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">31.</span>         peakToday = node.css(<span class="string">'td:nth-child(5)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">32.</span>         allPeak = node.css(<span class="string">'td:nth-child(6)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">33.</span>         <span class="built_in">print</span>(<span class="string">f"游戏：<span class="subst">{title}</span>,目前在线：<span class="subst">{current}</span>,今日最高在线：<span class="subst">{peakToday}</span>,历史最高在线：<span class="subst">{allPeak}</span>"</span>)  </span><br><span class="line"><span class="number">34.</span>    </span><br><span class="line"><span class="number">35.</span> <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line"><span class="number">36.</span>     start()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> playwright </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello 陈笨笨</title>
      <link href="/%E9%9A%8F%E7%AC%94/Hello-%E9%99%88%E7%AC%A8%E7%AC%A8/"/>
      <url>/%E9%9A%8F%E7%AC%94/Hello-%E9%99%88%E7%AC%A8%E7%AC%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-陈笨笨"><a href="#Hello-陈笨笨" class="headerlink" title="Hello 陈笨笨"></a>Hello 陈笨笨</h1><p>陈笨笨是我，这是我发神经之地，偶尔记录我的一些学习和刷题的记录……</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E9%9A%8F%E7%AC%94/hello-world/"/>
      <url>/%E9%9A%8F%E7%AC%94/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
