<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux--简单文件处理小技巧</title>
      <link href="/Linux/linux--%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/Linux/linux--%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="linux–简单文件处理小技巧"><a href="#linux–简单文件处理小技巧" class="headerlink" title="linux–简单文件处理小技巧"></a>linux–简单文件处理小技巧</h1><p>给路径下面所有.xls文件统计行数到一个count文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l *.xls* &gt;&gt;count.txt</span><br></pre></td></tr></tbody></table></figure><p>若是在主路径下有各分路径，则可以这样</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l */*.xls &gt;&gt;count.txt</span><br></pre></td></tr></tbody></table></figure><p>将压缩文件解压至指定路径</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip&nbsp; -d /targetDir targetFile.zip</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比Selenium好用？Python使用playwright获取S站在线游戏排名</title>
      <link href="/Python/%E6%AF%94Selenium%E5%A5%BD%E7%94%A8%EF%BC%9FPython%E4%BD%BF%E7%94%A8playwright%E8%8E%B7%E5%8F%96S%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%B8%B8%E6%88%8F%E6%8E%92%E5%90%8D/"/>
      <url>/Python/%E6%AF%94Selenium%E5%A5%BD%E7%94%A8%EF%BC%9FPython%E4%BD%BF%E7%94%A8playwright%E8%8E%B7%E5%8F%96S%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%B8%B8%E6%88%8F%E6%8E%92%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="比Selenium好用？Python使用playwright获取S站在线游戏排名"><a href="#比Selenium好用？Python使用playwright获取S站在线游戏排名" class="headerlink" title="比Selenium好用？Python使用playwright获取S站在线游戏排名"></a>比Selenium好用？Python使用playwright获取S站在线游戏排名</h1><p>在之前的文章中爬取了S的热销商品，也说明了因为Cloudflare的浏览器验证导致SDB无法爬取，连selenium也不行。当时我就放弃了。<br>但是前一段时间，有一个伙计给我讲：【用playwright啊！】<br>playwright支持多种语法，相比于selenium的Http协议，playwright的Websocket获取浏览器情况会更好一点。<br>Playwright的使用<br>安装：需要python3.7+</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> pip install --upgrade pip  </span><br><span class="line"><span class="number">2.</span> pip install playwright  </span><br><span class="line"><span class="number">3.</span> playwright install</span><br></pre></td></tr></tbody></table></figure><p>一次安装，Playwright就可以通过开发者工具与你安装的浏览器 (chromiun, firefox and webkit)进行交互，不像selenium下载对应浏览器版本的Driver了。</p><p>本次只讲一下最基本的页面获取，其他的功能各位自行查看文档吧：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright  </span><br><span class="line"><span class="number">2.</span>        </span><br><span class="line"><span class="number">3.</span> <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">4.</span>     browser = p.webkit.launch()  </span><br><span class="line"><span class="number">5.</span>     page = browser.new_page()  </span><br><span class="line"><span class="number">6.</span>     page.goto(<span class="string">"http://whatsmyuseragent.org/"</span>)  </span><br><span class="line"><span class="number">7.</span>     page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">8.</span>     html = page.content()  </span><br><span class="line"><span class="number">9.</span>     browser.close()</span><br></pre></td></tr></tbody></table></figure><p>html就是已经加载好的正文的内容，获取到的东西就可以交给选择器去处理跟筛选了。<br>实例:是一个第三方的S的数据库，在线人数，游戏价格等等都能查询的到。<br>在线人数，在线排名都有展示出来。现在开始获取数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">2.</span>     <span class="keyword">try</span>:  </span><br><span class="line"><span class="number">3.</span>         browser = p.chromium.launch(headless=<span class="literal">False</span>)  </span><br><span class="line"><span class="number">4.</span>         page = browser.new_page()  </span><br><span class="line"><span class="number">5.</span>         page.goto(<span class="string">'https://steamdb.info/graph/'</span>)  </span><br><span class="line"><span class="number">6.</span>         page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">7.</span>         html = page.content()  </span><br><span class="line"><span class="number">8.</span>         browser.close()  </span><br><span class="line"><span class="number">9.</span>         <span class="keyword">return</span> html  </span><br><span class="line"><span class="number">10.</span>     <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line"><span class="number">11.</span>         <span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure><p>不知道为什么开启无头就是通过不了。这样的话本页的html内容就获取下来了：<br>接下来用选择器进行内容解析：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> sel = Selector(text=content)  </span><br><span class="line"><span class="number">2.</span> nodes = sel.css(<span class="string">'#table-apps .app'</span>)  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span> node <span class="keyword">in</span> nodes:  </span><br><span class="line"><span class="number">4.</span>     title = node.css(<span class="string">'td:nth-child(3) a::text'</span>).extract_first()  </span><br><span class="line"><span class="number">5.</span>     current = node.css(<span class="string">'td:nth-child(4)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">6.</span>     peakToday = node.css(<span class="string">'td:nth-child(5)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">7.</span>     allPeak = node.css(<span class="string">'td:nth-child(6)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">8.</span>     <span class="built_in">print</span>(<span class="string">f"游戏：<span class="subst">{title}</span>,目前在线：<span class="subst">{current}</span>,今日最高在线：<span class="subst">{peakToday}</span>,历史最高在线：<span class="subst">{allPeak}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p>Playwright的代理配置<br>Playwright配置代理其实很简单，要在浏览器配置那一行加上proxy参数就可以了：<br>browser = p.chromium.launch(headless=False,proxy=proxy)</p><p>代码整合</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">from</span> parsel <span class="keyword">import</span> Selector  </span><br><span class="line"><span class="number">3.</span>    </span><br><span class="line"><span class="number">4.</span> <span class="keyword">def</span> <span class="title function_">getSteaminfo</span>():  </span><br><span class="line"><span class="number">5.</span>    </span><br><span class="line"><span class="number">6.</span>     proxy = {  </span><br><span class="line"><span class="number">7.</span>         <span class="string">'server'</span>: <span class="string">""</span>,  </span><br><span class="line"><span class="number">8.</span>         <span class="string">'username'</span>: <span class="string">""</span>,  </span><br><span class="line"><span class="number">9.</span>         <span class="string">'password'</span>: <span class="string">''</span>  </span><br><span class="line"><span class="number">10.</span>     }  </span><br><span class="line"><span class="number">11.</span>    </span><br><span class="line"><span class="number">12.</span>     <span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:  </span><br><span class="line"><span class="number">13.</span>         <span class="keyword">try</span>:  </span><br><span class="line"><span class="number">14.</span>             browser = p.chromium.launch(headless=<span class="literal">False</span>,proxy=proxy)  </span><br><span class="line"><span class="number">15.</span>             page = browser.new_page()  </span><br><span class="line"><span class="number">16.</span>             page.goto(<span class="string">'https://steamdb.info/graph/'</span>)  </span><br><span class="line"><span class="number">17.</span>             page.wait_for_load_state(<span class="string">'networkidle'</span>)  </span><br><span class="line"><span class="number">18.</span>             html = page.content()  </span><br><span class="line"><span class="number">19.</span>             browser.close()  </span><br><span class="line"><span class="number">20.</span>             <span class="keyword">return</span> html  </span><br><span class="line"><span class="number">21.</span>         <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line"><span class="number">22.</span>             <span class="built_in">print</span>(e)  </span><br><span class="line"><span class="number">23.</span>    </span><br><span class="line"><span class="number">24.</span> <span class="keyword">def</span> <span class="title function_">start</span>():  </span><br><span class="line"><span class="number">25.</span>     content = getSteaminfo()  </span><br><span class="line"><span class="number">26.</span>     sel = Selector(text=content)  </span><br><span class="line"><span class="number">27.</span>     nodes = sel.css(<span class="string">'#table-apps .app'</span>)  </span><br><span class="line"><span class="number">28.</span>     <span class="keyword">for</span> node <span class="keyword">in</span> nodes:  </span><br><span class="line"><span class="number">29.</span>         title = node.css(<span class="string">'td:nth-child(3) a::text'</span>).extract_first()  </span><br><span class="line"><span class="number">30.</span>         current = node.css(<span class="string">'td:nth-child(4)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">31.</span>         peakToday = node.css(<span class="string">'td:nth-child(5)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">32.</span>         allPeak = node.css(<span class="string">'td:nth-child(6)::text'</span>).extract_first()  </span><br><span class="line"><span class="number">33.</span>         <span class="built_in">print</span>(<span class="string">f"游戏：<span class="subst">{title}</span>,目前在线：<span class="subst">{current}</span>,今日最高在线：<span class="subst">{peakToday}</span>,历史最高在线：<span class="subst">{allPeak}</span>"</span>)  </span><br><span class="line"><span class="number">34.</span>    </span><br><span class="line"><span class="number">35.</span> <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line"><span class="number">36.</span>     start()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> playwright </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello 陈笨笨</title>
      <link href="/petty/Hello-%E9%99%88%E7%AC%A8%E7%AC%A8/"/>
      <url>/petty/Hello-%E9%99%88%E7%AC%A8%E7%AC%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-陈笨笨"><a href="#Hello-陈笨笨" class="headerlink" title="Hello 陈笨笨"></a>Hello 陈笨笨</h1><p>陈笨笨是我，这是我发神经之地，偶尔记录我的一些学习和刷题的记录……</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue_使用v-for遍历对象属性</title>
      <link href="/Linux/vue-%E4%BD%BF%E7%94%A8v-for%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
      <url>/Linux/vue-%E4%BD%BF%E7%94%A8v-for%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-使用v-for遍历对象属性"><a href="#vue-使用v-for遍历对象属性" class="headerlink" title="vue_使用v-for遍历对象属性"></a>vue_使用v-for遍历对象属性</h1><p>语法格式<br>(value,key,index) in user</p><p>其中： key,和index是可选参数。</p><p>代码示例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入最新的vue稳定版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://benben-chan.github.io/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--使用v-for遍历对象属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in user"</span>&gt;</span> 角标：{{index}}------ 键名: {{key}} ------ 值：{{value}} <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span>  vue=<span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:{</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>:{</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">'SkyManss'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="string">'男'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">26</span></span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：<br><img src="https://benben-chan.github.io/img/13084796c1969335a81fbfbd.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> v-for </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言--常用但总记不住的数据处理小技巧</title>
      <link href="/data-analysis/R%E8%AF%AD%E8%A8%80-%E5%B8%B8%E7%94%A8%E4%BD%86%E6%80%BB%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/data-analysis/R%E8%AF%AD%E8%A8%80-%E5%B8%B8%E7%94%A8%E4%BD%86%E6%80%BB%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="提取列表中包含特定字符的元素"><a href="#提取列表中包含特定字符的元素" class="headerlink" title="提取列表中包含特定字符的元素"></a>提取列表中包含特定字符的元素</h2><p>DE.pattern = your_list[grep(pattern = “pattern”,x = names(your_list),value = T)]</p><h2 id="批量读取列表内文件名字"><a href="#批量读取列表内文件名字" class="headerlink" title="批量读取列表内文件名字"></a>批量读取列表内文件名字</h2><p>library(pipeR)</p><p>library(rlist)</p><p>test = list.files(path = “E:/Desktop/“,pattern = “*” )</p><p>write.table(test,”E:/Desktop/readme.xls”,sep = “\t”)</p><h3 id="读取Excel中所有sheet"><a href="#读取Excel中所有sheet" class="headerlink" title="读取Excel中所有sheet"></a>读取Excel中所有sheet</h3><p>library(readxl)</p><p>excel_path &lt;- c(“your path/附件1植物激素MRM定量分析结果-1读取.xlsx”)</p><p>data = list()</p><p>for (i in 1:length(excel_sheets(excel_path))) {</p><p>&nbsp; data[[i]] = read_xlsx(path = excel_path,sheet = i)</p><p>}</p><p>names(data) = excel_sheets(excel_path)</p><h3 id="替换掉数据中的inf-x2F-NA-x2F-0"><a href="#替换掉数据中的inf-x2F-NA-x2F-0" class="headerlink" title="替换掉数据中的inf/NA/0"></a>替换掉数据中的inf/NA/0</h3><p>yourdata[yourdata==Inf]&lt;-NA</p><h3 id="绘制热图时去掉所有值行为0的行"><a href="#绘制热图时去掉所有值行为0的行" class="headerlink" title="绘制热图时去掉所有值行为0的行"></a>绘制热图时去掉所有值行为0的行</h3><p>data_figure = data_figure[which(rowSums(data_figure)&gt;0),]</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> data-analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 MIME Type(MIME类型)？文件扩展名?</title>
      <link href="/petty/%E4%BB%80%E4%B9%88%E6%98%AF%20MIME%20Type(MIME%E7%B1%BB%E5%9E%8B)%EF%BC%9F%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%EF%BC%9F/"/>
      <url>/petty/%E4%BB%80%E4%B9%88%E6%98%AF%20MIME%20Type(MIME%E7%B1%BB%E5%9E%8B)%EF%BC%9F%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>一、</p><p>首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。<br>媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如:</p><p>Content-Type: text/HTML</p><p>表示内容是 text/HTML 类型，也就是超文本文件。为什么是“text/HTML”而不是“HTML/text”或者别的什么？MIME Type 不是个人指定的，是经过 ietf 组织协商，以 RFC 的形式作为建议的标准发布在网上的，大多数的 Web 服务器和用户代理都会支持这个规范 (顺便说一句，Email 附件的类型也是通过 MIME Type 指定的)。</p><p>通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。</p><p>XHTML 正是一个获得广泛应用的格式，因此，在 RFC 3236 中，说明了 XHTML 格式文件的 MIME Type 应该是 application/xHTML+XML。</p><p>当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理，这可能和你在操作系统中给文件配置的 MIME Type 有关。比如在 Windows 下，打开注册表的“HKEY_LOCAL_MACHINESOFTWAREClassesMIMEDatabaseContent Type”主键，你可以看到所有 MIME Type 的配置信息。</p><p>二、</p><p>在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。</p><p>例如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。在大多数实际情况中，这个文件然后将传送给Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类型的方法是通过Response对象的ContentType属性。</p><p>多媒体文件格式MIME</p><p>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。</p><p>MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。</p><p>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p><p>常见的MIME类型</p><p>超文本标记语言文本 .html,.html text/html<br>普通文本 .txt text/plain<br>RTF文本 .rtf application/rtf<br>GIF图形 .gif image/gif<br>JPEG图形 .ipeg,.jpg image/jpeg<br>au声音文件 .au audio/basic<br>MIDI音乐文件 mid,.midi audio/midi,audio/x-midi<br>RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio<br>MPEG文件 .mpg,.mpeg video/mpeg<br>AVI文件 .avi video/x-msvideo<br>GZIP文件 .gz application/x-gzip<br>TAR文件 .tar application/x-tar</p><p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。而Web服务器和浏览器（包括操作系统）中，缺省都设置了标准的和常见的MIME类型，只有对于不常见的 MIME类型，才需要同时设置服务器和客户浏览器，以进行识别。</p><p>由于MIME类型与文档的后缀相关，因此服务器使用文档的后缀来区分不同文件的MIME类型，服务器中必须定义文档后缀和MIME类型之间的对应关系。而客户程序从服务器上接收数据的时候，它只是从服务器接受数据流，并不了解文档的名字，因此服务器必须使用附加信息来告诉客户程序数据的MIME类型。服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义，例如对于HTML文档，服务器将首先发送以下两行MIME标识信息,这个标识并不是真正的数据文件的一部分。</p><p>Content-type: text/html</p><p>注意，第二行为一个空行，这是必须的，使用这个空行的目的是将MIME信息与真正的数据内容分隔开。</p><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br>官方的 MIME 信息是由 Internet Engineering Task Force (IETF) 在下面的文档中提供的：<br>RFC-822 Standard for ARPA Internet text messages</p><p>RFC-2045 MIME Part 1: Format of Internet Message Bodies</p><p>RFC-2046 MIME Part 2: Media Types</p><p>RFC-2047 MIME Part 3: Header Extensions for Non-ASCII Text</p><p>RFC-2048 MIME Part 4: Registration Procedures</p><p>RFC-2049 MIME Part 5: Conformance Criteria and Examples</p><p>不同的应用程序支持不同的 MIME 类型。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIME Type </tag>
            
            <tag> mime.types </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell、R和python的命令行传参汇总</title>
      <link href="/Shell/shell%E3%80%81R%E5%92%8Cpython%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82%E6%B1%87%E6%80%BB/"/>
      <url>/Shell/shell%E3%80%81R%E5%92%8Cpython%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>shell 脚本传参默认是以数组array的形式传入，且是字符型。<br>设定好了的，脚本内不需要任何的语句申明，脚本后面跟了内容，就会自动默认是参数内容传入脚本。相当于shell的内置变量。<br>调用：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test.sh exp1 exp2 exp3</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0   脚本本身的名字 例如 test.sh</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1~n 位置参数，脚本传入的第几个参数，如果大于9，则用{}，例如<span class="variable">${10}</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*   传递的所有参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@   同上$*</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#   代表传递参数的个数</span></span></span><br></pre></td></tr></tbody></table></figure><h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><p>1.最基础的方式，在脚本内加入args &lt;- commandArgs(T)，默认也是数组或说向量的形式。</p><figure class="highlight r"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法（test.R里面有args &lt;- commandArgs(T)了）</span></span><br><span class="line">test.R exp1 exp2 exp3</span><br><span class="line"><span class="comment">#脚本内调用</span></span><br><span class="line">arg <span class="comment">#默认参数以向量vector的模式加入，存储在arg这个变量中</span></span><br><span class="line">a<span class="operator">=</span>arg<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="comment"># 向量的访问，第一个参数</span></span><br><span class="line">b<span class="operator">=</span>arg<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span>  <span class="comment"># 第二个参数，以此类推</span></span><br></pre></td></tr></tbody></table></figure><p>2.进阶的方式非常多，无非都是搭载包，本质其实还是利用的args &lt;- commandArgs(T)这个基础设定，只是多非常多的解释说明，使得程序更加用户友好和易读。对应的包有：getopt,optparse和argparse等多个。<br>这里只介绍也最建议使用argparse,因为它的说明和解释功能比较全面，不弱于其它包，而且可以统一python中常用的传参模块（见后）。主要分为三步：创建对象—填入参数—解析参数，然后可以调用</p><figure class="highlight r"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">"argparse"</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">"argparse"</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Usage</span></span><br><span class="line"><span class="comment"># 创建参数解析对象</span></span><br><span class="line">parser <span class="operator">&lt;-</span> ArgumentParser<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line"><span class="comment"># 设置第一个参数verbose，缩写为v，其作用是告诉脚本是否打印完整的计算过程，其缺省值为TRUE</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">"-v"</span><span class="punctuation">,</span> <span class="string">"--verbose"</span><span class="punctuation">,</span> action<span class="operator">=</span><span class="string">"store_true"</span><span class="punctuation">,</span> default<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">        help<span class="operator">=</span><span class="string">"Print extra output [default]"</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 设置第二个参数quietly，缩写为q，其作用是修改verbose参数，当调用改参数时，verbose被修改为FALSE，从而导致不再打印计算过程</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">"-q"</span><span class="punctuation">,</span> <span class="string">"--quietly"</span><span class="punctuation">,</span> action<span class="operator">=</span><span class="string">"store_false"</span><span class="punctuation">,</span> </span><br><span class="line">        dest<span class="operator">=</span><span class="string">"verbose"</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">"Print little output"</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 设置第三个参数count，缩写为c，这是一个整数参数，缺省值5，在后续的代码中被用作确定输出随机数的个数</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">"-c"</span><span class="punctuation">,</span> <span class="string">"--count"</span><span class="punctuation">,</span> type<span class="operator">=</span><span class="string">"integer"</span><span class="punctuation">,</span> default<span class="operator">=</span><span class="number">5</span><span class="punctuation">,</span> </span><br><span class="line">        help<span class="operator">=</span><span class="string">"Number of random normals to generate [default %(default)s]"</span><span class="punctuation">,</span></span><br><span class="line">        metavar<span class="operator">=</span><span class="string">"number"</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment">#以此类推，无限累加参数设定和说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用解析器，此时args就被赋值为命令行参数输入的相应值</span></span><br><span class="line">args <span class="operator">&lt;-</span> parser<span class="operator">$</span>parse_args<span class="punctuation">(</span><span class="punctuation">)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#调用 例如：</span></span><br><span class="line">args<span class="operator">$</span>count <span class="comment">#一般是直接用全名调用</span></span><br></pre></td></tr></tbody></table></figure><p>举例：</p><figure class="highlight r"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parser <span class="operator">=</span> argparse<span class="operator">::</span>ArgumentParser<span class="punctuation">(</span>description<span class="operator">=</span><span class="string">"Script to Cluster-callpeak-motif scATAC data by ArchR"</span><span class="punctuation">)</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">'-I'</span><span class="punctuation">,</span><span class="string">'--inputpath'</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">'input Proj directory'</span><span class="punctuation">)</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">'-D'</span><span class="punctuation">,</span><span class="string">'--id'</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">'tissue ID'</span><span class="punctuation">)</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">'-O'</span><span class="punctuation">,</span><span class="string">'--out'</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">'out directory'</span><span class="punctuation">)</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">'-T'</span><span class="punctuation">,</span><span class="string">'--threads'</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">'threads'</span><span class="punctuation">)</span></span><br><span class="line">parser<span class="operator">$</span>add_argument<span class="punctuation">(</span><span class="string">'-G'</span><span class="punctuation">,</span><span class="string">'--genomesize'</span><span class="punctuation">,</span> help<span class="operator">=</span><span class="string">'genomesize'</span><span class="punctuation">)</span></span><br><span class="line">args <span class="operator">=</span> parser<span class="operator">$</span>parse_args<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">setwd<span class="punctuation">(</span>args<span class="operator">$</span>out<span class="punctuation">)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>python同R一样，传参的方式和包（模块）种类非常多，大家可以自行选择，这里只介绍argparse这个模块。同样的步骤：调用模块/包—定义参数—解析参数—调用便好。示例如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    description=<span class="string">'sub clustering by scanpy with the region you assign!'</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=description)</span><br><span class="line">    parser.add_argument(<span class="string">'-I'</span>,<span class="string">"--input"</span>,<span class="built_in">help</span>=<span class="string">'input the path of your annotated data'</span>)</span><br><span class="line">    <span class="comment">#parser.add_argument('-B',"--bins",help='bins you want',default=50)</span></span><br><span class="line">    parser.add_argument(<span class="string">'-L'</span>,<span class="string">'--level'</span>,<span class="built_in">help</span>=<span class="string">'Classification mode in your data.obs, like region/celltype/leiden etc'</span>,default=<span class="string">'leiden'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-C'</span>,<span class="string">'--region'</span>,<span class="built_in">help</span>=<span class="string">'Specific region or celltype you want to sub-cluster, eg. A or B or A_B format'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-O'</span>,<span class="string">'--output'</span>,<span class="built_in">help</span>=<span class="string">'output path'</span>,default=<span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line">args=parse_args()</span><br><span class="line"><span class="comment">#调用举例</span></span><br><span class="line">data_path=args.<span class="built_in">input</span> <span class="comment">#都是用全名调用，不用缩写</span></span><br><span class="line">os.chdir(data_path)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> 传参 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/petty/hello-world/"/>
      <url>/petty/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
